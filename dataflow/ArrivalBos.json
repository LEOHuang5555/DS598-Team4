{
	"name": "ArrivalBos",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BOSarrival",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flatten1",
					"description": "Add columns to map"
				}
			],
			"scriptLines": [
				"source(output(",
				"          type as string,",
				"          status as string,",
				"          departure as (iataCode as string, icaoCode as string, gate as string, delay as integer, scheduledTime as string, estimatedTime as string, actualTime as string, estimatedRunway as string, actualRunway as string, terminal as string),",
				"          arrival as (iataCode as string, icaoCode as string, terminal as string, baggage as string, gate as string, scheduledTime as string, estimatedTime as string, actualTime as string, estimatedRunway as string, actualRunway as string, delay as integer),",
				"          airline as (name as string, iataCode as string, icaoCode as string),",
				"          flight as (number as string, iataNumber as string, icaoNumber as string),",
				"          codeshared as (airline as (name as string, iataCode as string, icaoCode as string), flight as (number as string, iataNumber as string, icaoNumber as string))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('hash', 1)) ~> source1",
				"source1 foldDown(unroll(),",
				"     mapColumn(",
				"          type,",
				"          status,",
				"          dep_iataCode = departure.icaoCode,",
				"          dep_icaoCode = departure.icaoCode,",
				"          dep_gate = departure.gate,",
				"          dep_delay = departure.delay,",
				"          dep_scheduledTime = departure.scheduledTime,",
				"          dep_estimatedTime = departure.estimatedTime,",
				"          dep_actualTime = departure.actualTime,",
				"          dep_estimatedRunway = departure.estimatedRunway,",
				"          dep_actualRunway = departure.actualRunway,",
				"          dep_terminal = departure.terminal,",
				"          arr_iataCode = arrival.iataCode,",
				"          arr_icaoCode = arrival.icaoCode,",
				"          arr_terminal = arrival.terminal,",
				"          arr_baggage = arrival.baggage,",
				"          arr_gate = arrival.gate,",
				"          arr_scheduledTime = arrival.scheduledTime,",
				"          arr_estimatedTime = arrival.estimatedTime,",
				"          arr_actualTime = arrival.actualTime,",
				"          arr_estimatedRunway = arrival.estimatedRunway,",
				"          arr_actualRunway = arrival.actualRunway,",
				"          arr_delay = arrival.delay,",
				"          airline_name = airline.name,",
				"          airline_iataCode = airline.iataCode,",
				"          airline_icaoCode = airline.icaoCode,",
				"          flight_number = flight.number,",
				"          flight_iataNumber = flight.iataNumber,",
				"          flight_icaoNumber = flight.icaoNumber,",
				"          codeshared_airline_name = codeshared.airline.name,",
				"          codeshared_airline_iataCode = codeshared.airline.iataCode,",
				"          codeshared_airline_icaoCode = codeshared.airline.icaoCode,",
				"          codeshared_flight_number = codeshared.flight.number,",
				"          codeshared_flight_iataNumber = codeshared.flight.iataNumber,",
				"          codeshared_flight_icaoNumber = codeshared.flight.icaoNumber",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1"
			]
		}
	}
}