{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFteam4"
		},
		"ADLSTeam4_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSTeam4'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"FinalProject_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'FinalProject'"
		},
		"ADLSTeam4_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageteam4.dfs.core.windows.net/"
		},
		"AirPollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.openweathermap.org/"
		},
		"AirPollution_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DS598Team4"
		},
		"FinalProject_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "LeoHuang5555"
		},
		"OWAPIKey_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OpenWeatherTeam4.vault.azure.net/"
		},
		"Weather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		},
		"Weather_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DS598Team4"
		},
		"aviationEdge_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://aviation-edge.com/v2/public/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ArrivalBos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/aviationEdgeKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1_copy2",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,24)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2_copy2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:04:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "aviationEdge",
											"type": "DatasetReference",
											"parameters": {
												"apiKey": "@activity('Web1').output.value",
												"depArr": "arrival",
												"airport": "BOS",
												"start": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(add(item(),1), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"end": {
													"value": "@formatDateTime(addDays('2024-12-02T00:00:00Z', mul(item(), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BOSarrival",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/aviationEdge')]",
				"[concat(variables('factoryId'), '/datasets/BOSarrival')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherPipelineBos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(53,104)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"start": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(add(item(),1), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(item(), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"apiKey": "@activity('Web1').output.value"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json3",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather')]",
				"[concat(variables('factoryId'), '/datasets/Json3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherPipelineLA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LA Weather",
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,52)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "setOfObjects"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather",
											"type": "DatasetReference",
											"parameters": {
												"lat": 34.0536909,
												"lon": -118.242766,
												"start": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(add(item(),1), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(item(), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"apiKey": "@activity('Web1').output.value"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BOSarrival')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "flightData/BOSarrival",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"departure": {
							"type": "object",
							"properties": {
								"iataCode": {
									"type": "string"
								},
								"icaoCode": {
									"type": "string"
								},
								"gate": {
									"type": "string"
								},
								"delay": {
									"type": "integer"
								},
								"scheduledTime": {
									"type": "string"
								},
								"estimatedTime": {
									"type": "string"
								},
								"actualTime": {
									"type": "string"
								},
								"estimatedRunway": {
									"type": "string"
								},
								"actualRunway": {
									"type": "string"
								},
								"terminal": {
									"type": "string"
								}
							}
						},
						"arrival": {
							"type": "object",
							"properties": {
								"iataCode": {
									"type": "string"
								},
								"icaoCode": {
									"type": "string"
								},
								"terminal": {
									"type": "string"
								},
								"baggage": {
									"type": "string"
								},
								"gate": {
									"type": "string"
								},
								"scheduledTime": {
									"type": "string"
								},
								"estimatedTime": {
									"type": "string"
								},
								"actualTime": {
									"type": "string"
								},
								"estimatedRunway": {
									"type": "string"
								},
								"actualRunway": {
									"type": "string"
								},
								"delay": {
									"type": "integer"
								}
							}
						},
						"airline": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"iataCode": {
									"type": "string"
								},
								"icaoCode": {
									"type": "string"
								}
							}
						},
						"flight": {
							"type": "object",
							"properties": {
								"number": {
									"type": "string"
								},
								"iataNumber": {
									"type": "string"
								},
								"icaoNumber": {
									"type": "string"
								}
							}
						},
						"codeshared": {
							"type": "object",
							"properties": {
								"airline": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"iataCode": {
											"type": "string"
										},
										"icaoCode": {
											"type": "string"
										}
									}
								},
								"flight": {
									"type": "object",
									"properties": {
										"number": {
											"type": "string"
										},
										"iataNumber": {
											"type": "string"
										},
										"icaoNumber": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BOSdeparture')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "flightData/BOSdeparture",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "laWeather",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bostonWeather",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bostonWeather2",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LAXarrival')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "flightData/LAXarrival",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LAXdeparture')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "flightData/LAXdeparture",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MBosArrival')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "flightData/BosArrival1",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"departure": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"iataCode": {
										"type": "string"
									},
									"icaoCode": {
										"type": "string"
									},
									"gate": {
										"type": "string"
									},
									"delay": {
										"type": "integer"
									},
									"scheduledTime": {
										"type": "string"
									},
									"estimatedTime": {
										"type": "string"
									},
									"actualTime": {
										"type": "string"
									},
									"estimatedRunway": {
										"type": "string"
									},
									"actualRunway": {
										"type": "string"
									}
								}
							}
						},
						"arrival": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"iataCode": {
										"type": "string"
									},
									"icaoCode": {
										"type": "string"
									},
									"terminal": {
										"type": "string"
									},
									"baggage": {
										"type": "string"
									},
									"gate": {
										"type": "string"
									},
									"scheduledTime": {
										"type": "string"
									},
									"estimatedTime": {
										"type": "string"
									},
									"actualTime": {
										"type": "string"
									},
									"estimatedRunway": {
										"type": "string"
									},
									"actualRunway": {
										"type": "string"
									}
								}
							}
						},
						"airline": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"iataCode": {
										"type": "string"
									},
									"icaoCode": {
										"type": "string"
									}
								}
							}
						},
						"flight": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"number": {
										"type": "string"
									},
									"iataNumber": {
										"type": "string"
									},
									"icaoNumber": {
										"type": "string"
									}
								}
							}
						},
						"codeshared": {
							"type": "object",
							"properties": {
								"airline": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"iataCode": {
												"type": "string"
											},
											"icaoCode": {
												"type": "string"
											}
										}
									}
								},
								"flight": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"number": {
												"type": "string"
											},
											"iataNumber": {
												"type": "string"
											},
											"icaoNumber": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aviationEdge')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "aviationEdge",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"apiKey": {
						"type": "String"
					},
					"depArr": {
						"type": "String"
					},
					"airport": {
						"type": "String"
					},
					"start": {
						"type": "String"
					},
					"end": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "delay_reason?key=@{dataset().apiKey}&code=@{dataset().airport}&type=@{dataset().depArr}&date_from=@{dataset().start}&date_to=@{dataset().end}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/aviationEdge')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bostonWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bostonWeather",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									},
									"rain": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									},
									"snow": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/laWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "laWeather",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									},
									"rain": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									},
									"snow": {
										"type": "object",
										"properties": {
											"1h": {
												"type": "number"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_bosDeparture')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bosArrival",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_bostonWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bostonWeather",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_laWeather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSTeam4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "laWeather",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSTeam4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Weather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 34.0536909
					},
					"lon": {
						"type": "float",
						"defaultValue": -118.242766
					},
					"start": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"apiKey": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().apiKey}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSTeam4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSTeam4_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSTeam4_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AirPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('AirPollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('AirPollution_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "OWAPIKey",
							"type": "LinkedServiceReference"
						},
						"secretName": "OpenWeatherAPIKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OWAPIKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinalProject')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Flight Delay Prediction at Boston Logan Airport",
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('FinalProject_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('FinalProject_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDhFQUVDMjFFLTZCRkMtNDZBMi04Q0UxLUMwOEYwODk2QTVEM184OGQzNzBiNS1hNzdkLTQ0NWQtYWQxOS02ZjMxYmYzZThmMGYiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OWAPIKey')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('OWAPIKey_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Weather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Weather_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "OWAPIKey",
							"type": "LinkedServiceReference"
						},
						"secretName": "OpenWeatherAPIKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OWAPIKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aviationEdge')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('aviationEdge_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Boston_dataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bostonWeather",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_bostonWeather",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double), snow as ({1h} as double))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bostonWeather/*.json']) ~> source1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          all = list.clouds.all,",
						"          weather_id = list.weather.id,",
						"          main = list.weather.main,",
						"          description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), toInteger(timestamp)),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_c = round(temp - 273.15, 2),",
						"          temp_f = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_c = round(temp_min - 273.15, 2),",
						"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_c = round(temp_max - 273.15, 2),",
						"          temp_max_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]),':')[1]),",
						"          weather_main_value = (split(toString(main[1]), ':')[1]),",
						"          weather_description_value = (split(toString(description[1]),':')[1]),",
						"          weather_icon_value = (split(toString(icon[1]), ':')[1]),",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h)),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          temp,",
						"          feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min,",
						"          temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          wind_gust,",
						"          all,",
						"          rain_1h,",
						"          snow_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_c,",
						"          temp_f,",
						"          temp_min_c,",
						"          temp_min_f,",
						"          temp_max_c,",
						"          temp_max_f,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['historicalBostonWeather'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bostonWeather')]",
				"[concat(variables('factoryId'), '/datasets/silver_bostonWeather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/La_dataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "laWeather",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_laWeather",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double), snow as ({1h} as double))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['laWeather/*.json']) ~> source1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          all = list.clouds.all,",
						"          weather_id = list.weather.id,",
						"          main = list.weather.main,",
						"          description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), toInteger(timestamp)),",
						"          location = 'LA') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_c = round(temp - 273.15, 2),",
						"          temp_f = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_c = round(temp_min - 273.15, 2),",
						"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_c = round(temp_max - 273.15, 2),",
						"          temp_max_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          lat = 34.0522,",
						"          lon = -118.2436,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]),':')[1]),",
						"          weather_main_value = (split(toString(main[1]), ':')[1]),",
						"          weather_description_value = (split(toString(description[1]),':')[1]),",
						"          weather_icon_value = (split(toString(icon[1]), ':')[1]),",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h)),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          temp,",
						"          feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min,",
						"          temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          wind_gust,",
						"          all,",
						"          rain_1h,",
						"          snow_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_c,",
						"          temp_f,",
						"          temp_min_c,",
						"          temp_min_f,",
						"          temp_max_c,",
						"          temp_max_f,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['historicalLaWeather'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/laWeather')]",
				"[concat(variables('factoryId'), '/datasets/silver_laWeather')]"
			]
		}
	]
}