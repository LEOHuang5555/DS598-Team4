{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFteam4"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ArrivalBos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/aviationEdgeKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,24)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:04:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "aviationEdge",
											"type": "DatasetReference",
											"parameters": {
												"apiKey": "@activity('Web1').output.value",
												"depArr": "arrival",
												"airport": "BOS",
												"start": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(add(item(),1), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"end": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(item(), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BOSarrival",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,24)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:04:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "aviationEdge",
											"type": "DatasetReference",
											"parameters": {
												"apiKey": "@activity('Web1').output.value",
												"depArr": "departure",
												"airport": "BOS",
												"start": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(add(item(),1), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"end": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(item(), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BOSdeparture",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEach1_copy2",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,24)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2_copy2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:04:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "aviationEdge",
											"type": "DatasetReference",
											"parameters": {
												"apiKey": "@activity('Web1').output.value",
												"depArr": "departure",
												"airport": "LAX",
												"start": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(add(item(),1), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"end": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(item(), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LAXdeparture",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEach1_copy3",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,24)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2_copy3",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:04:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "aviationEdge",
											"type": "DatasetReference",
											"parameters": {
												"apiKey": "@activity('Web1').output.value",
												"depArr": "arrival",
												"airport": "LAX",
												"start": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(add(item(),1), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"end": {
													"value": "@formatDateTime(addDays('2024-11-16T00:00:00Z', mul(item(), -15)), 'yyyy-MM-dd')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "LAXarrival",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Weather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "float",
						"defaultValue": 34.0536909
					},
					"lon": {
						"type": "float",
						"defaultValue": -118.242766
					},
					"start": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"end": {
						"type": "string",
						"defaultValue": "@div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)"
					},
					"apiKey": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().apiKey}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArrivalBos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BOSarrival",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_bosDeparture",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to silver_bosDeparture"
						}
					],
					"transformations": [
						{
							"name": "flatten1",
							"description": "Add columns to map"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          type as string,",
						"          status as string,",
						"          departure as (iataCode as string, icaoCode as string, gate as string, delay as integer, scheduledTime as string, estimatedTime as string, actualTime as string, estimatedRunway as string, actualRunway as string, terminal as string),",
						"          arrival as (iataCode as string, icaoCode as string, terminal as string, baggage as string, gate as string, scheduledTime as string, estimatedTime as string, actualTime as string, estimatedRunway as string, actualRunway as string, delay as integer),",
						"          airline as (name as string, iataCode as string, icaoCode as string),",
						"          flight as (number as string, iataNumber as string, icaoNumber as string),",
						"          codeshared as (airline as (name as string, iataCode as string, icaoCode as string), flight as (number as string, iataNumber as string, icaoNumber as string))",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 foldDown(unroll(),",
						"     mapColumn(",
						"          type,",
						"          status,",
						"          dep_iataCode = departure.icaoCode,",
						"          dep_icaoCode = departure.icaoCode,",
						"          dep_gate = departure.gate,",
						"          dep_delay = departure.delay,",
						"          dep_scheduledTime = departure.scheduledTime,",
						"          dep_estimatedTime = departure.estimatedTime,",
						"          dep_actualTime = departure.actualTime,",
						"          dep_estimatedRunway = departure.estimatedRunway,",
						"          dep_actualRunway = departure.actualRunway,",
						"          dep_terminal = departure.terminal,",
						"          arr_iataCode = arrival.iataCode,",
						"          arr_icaoCode = arrival.icaoCode,",
						"          arr_terminal = arrival.terminal,",
						"          arr_baggage = arrival.baggage,",
						"          arr_gate = arrival.gate,",
						"          arr_scheduledTime = arrival.scheduledTime,",
						"          arr_estimatedTime = arrival.estimatedTime,",
						"          arr_actualTime = arrival.actualTime,",
						"          arr_estimatedRunway = arrival.estimatedRunway,",
						"          arr_actualRunway = arrival.actualRunway,",
						"          arr_delay = arrival.delay,",
						"          airline_name = airline.name,",
						"          airline_iataCode = airline.iataCode,",
						"          airline_icaoCode = airline.icaoCode,",
						"          flight_number = flight.number,",
						"          flight_iataNumber = flight.iataNumber,",
						"          flight_icaoNumber = flight.icaoNumber,",
						"          codeshared_airline_name = codeshared.airline.name,",
						"          codeshared_airline_iataCode = codeshared.airline.iataCode,",
						"          codeshared_airline_icaoCode = codeshared.airline.icaoCode,",
						"          codeshared_flight_number = codeshared.flight.number,",
						"          codeshared_flight_iataNumber = codeshared.flight.iataNumber,",
						"          codeshared_flight_icaoNumber = codeshared.flight.icaoNumber",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(flight_duration_minutes = toInteger((toTimestamp(arr_scheduledTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS') - toTimestamp(dep_scheduledTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')) / 60 / 1000),",
						"          departure_scheduledTime_dt = toTimestamp(dep_scheduledTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          departure_delay_minutes = toInteger((toTimestamp(dep_actualTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS') - toTimestamp(dep_scheduledTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')) / 60 / 1000),",
						"          airline_name_upper = upper(airline_name),",
						"          flight_number_trimmed = trim(flight_number),",
						"          departure_gate = iif(isNull(dep_gate), 'Unknown', dep_gate),",
						"          actual_departure_time = iif(isNull(dep_actualTime), dep_scheduledTime, dep_actualTime),",
						"          flight_id = concat(airline_iataCode, '_', flight_number, '_', toString(toDate(dep_scheduledTime, 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'), 'yyyyMMdd')),",
						"          is_on_time_departure = iif(dep_delay <= 0, true(), false()),",
						"          departure_delay_category = iif(dep_delay <= 15, '0-15 min',",
						"    iif(dep_delay <= 30, '16-30 min', '30+ min'))) ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(flight_id) && !isNull(type)  && !isNull(status)) ~> filter1",
						"filter1 select(mapColumn(",
						"          type,",
						"          status,",
						"          dep_iataCode,",
						"          dep_icaoCode,",
						"          dep_gate,",
						"          dep_delay,",
						"          dep_scheduledTime,",
						"          dep_estimatedTime,",
						"          dep_actualTime,",
						"          dep_estimatedRunway,",
						"          dep_actualRunway,",
						"          dep_terminal,",
						"          arr_iataCode,",
						"          arr_icaoCode,",
						"          arr_terminal,",
						"          arr_baggage,",
						"          arr_gate,",
						"          arr_scheduledTime,",
						"          arr_estimatedTime,",
						"          arr_actualTime,",
						"          arr_estimatedRunway,",
						"          arr_actualRunway,",
						"          arr_delay,",
						"          airline_name,",
						"          airline_iataCode,",
						"          airline_icaoCode,",
						"          flight_number,",
						"          flight_iataNumber,",
						"          flight_icaoNumber,",
						"          codeshared_airline_name,",
						"          codeshared_airline_iataCode,",
						"          codeshared_airline_icaoCode,",
						"          codeshared_flight_number,",
						"          codeshared_flight_iataNumber,",
						"          codeshared_flight_icaoNumber,",
						"          flight_duration_minutes,",
						"          departure_scheduledTime_dt,",
						"          departure_delay_minutes,",
						"          airline_name_upper,",
						"          flight_number_trimmed,",
						"          departure_gate,",
						"          actual_departure_time,",
						"          flight_id,",
						"          is_on_time_departure,",
						"          departure_delay_category",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['historialBosArrival'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Boston_dataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bostonWeather",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_bostonWeather",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double), snow as ({1h} as double))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bostonWeather/*.json']) ~> source1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          all = list.clouds.all,",
						"          weather_id = list.weather.id,",
						"          main = list.weather.main,",
						"          description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), toInteger(timestamp)),",
						"          location = 'Boston') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_c = round(temp - 273.15, 2),",
						"          temp_f = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_c = round(temp_min - 273.15, 2),",
						"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_c = round(temp_max - 273.15, 2),",
						"          temp_max_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          lat = 42.3601,",
						"          lon = -71.0589,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]),':')[1]),",
						"          weather_main_value = (split(toString(main[1]), ':')[1]),",
						"          weather_description_value = (split(toString(description[1]),':')[1]),",
						"          weather_icon_value = (split(toString(icon[1]), ':')[1]),",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h)),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          temp,",
						"          feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min,",
						"          temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          wind_gust,",
						"          all,",
						"          rain_1h,",
						"          snow_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_c,",
						"          temp_f,",
						"          temp_min_c,",
						"          temp_min_f,",
						"          temp_max_c,",
						"          temp_max_f,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['historicalBostonWeather'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/La_dataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "laWeather",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[], rain as ({1h} as double), snow as ({1h} as double))[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['laWeather/*.json']) ~> source1",
						"source1 foldDown(unroll(list),",
						"     mapColumn(",
						"          message,",
						"          cod,",
						"          city_id,",
						"          calctime,",
						"          cnt,",
						"          timestamp = list.dt,",
						"          temp = list.main.temp,",
						"          feels_like = list.main.feels_like,",
						"          pressure = list.main.pressure,",
						"          humidity = list.main.humidity,",
						"          temp_min = list.main.temp_min,",
						"          temp_max = list.main.temp_max,",
						"          wind_speed = list.wind.speed,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          all = list.clouds.all,",
						"          weather_id = list.weather.id,",
						"          main = list.weather.main,",
						"          description = list.weather.description,",
						"          icon = list.weather.icon,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), toInteger(timestamp)),",
						"          location = 'LA') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && !isNull(corrected_timestamp)) ~> filter1",
						"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, '_', toString(corrected_timestamp)),",
						"          temp_c = round(temp - 273.15, 2),",
						"          temp_f = round((temp - 273.15) * 9/5 + 32, 2),",
						"          temp_min_c = round(temp_min - 273.15, 2),",
						"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          temp_max_c = round(temp_max - 273.15, 2),",
						"          temp_max_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
						"          lat = 34.0522,",
						"          lon = -118.2436,",
						"          weather_id_value = toInteger(split(toString(weather_id[1]),':')[1]),",
						"          weather_main_value = (split(toString(main[1]), ':')[1]),",
						"          weather_description_value = (split(toString(description[1]),':')[1]),",
						"          weather_icon_value = (split(toString(icon[1]), ':')[1]),",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h)),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(snow_1h))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          temp,",
						"          feels_like,",
						"          pressure,",
						"          humidity,",
						"          temp_min,",
						"          temp_max,",
						"          wind_speed,",
						"          wind_deg,",
						"          wind_gust,",
						"          all,",
						"          rain_1h,",
						"          snow_1h,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_c,",
						"          temp_f,",
						"          temp_min_c,",
						"          temp_min_f,",
						"          temp_max_c,",
						"          temp_max_f,",
						"          lat,",
						"          lon,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['historicalLaWeather'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherPipelineBos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(53,104)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather",
											"type": "DatasetReference",
											"parameters": {
												"lat": 42.3601,
												"lon": -71.0589,
												"start": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(add(item(),1), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(item(), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"apiKey": "@activity('Web1').output.value"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json3",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherPipelineLA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LA Weather",
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherteam4.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0,52)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings",
												"filePattern": "setOfObjects"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather",
											"type": "DatasetReference",
											"parameters": {
												"lat": 34.0536909,
												"lon": -118.242766,
												"start": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(add(item(),1), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(subtractFromTime(utcNow(),mul(item(), 7), 'Day')),ticks('1970-01-01T00:00:00Z')),10000000)",
													"type": "Expression"
												},
												"apiKey": "@activity('Web1').output.value"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Json1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bostonWeather_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bostonWeather_dataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Boston_dataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Boston_dataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/laWeather_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "laWeather_dataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "La_dataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/La_dataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bosArrival_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bosArrivalDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ArrivalBos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ArrivalBos')]"
			]
		}
	]
}